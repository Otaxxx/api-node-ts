// Importation des types Request et Response depuis Express
import { Request, Response } from 'express';

/**
 * Interface dÃ©finissant la structure d'un utilisateur
 * Permet un typage strict pour garantir la cohÃ©rence des donnÃ©es
 */
interface User {
  name: string;   // Nom de l'utilisateur (obligatoire)
  email: string;  // Email de l'utilisateur (obligatoire)
}

/**
 * Tableau de stockage des utilisateurs en mÃ©moire
 * En production, cela serait remplacÃ© par une base de donnÃ©es (MongoDB, PostgreSQL, etc.)
 */
const users: User[] = [];

/**
 * ContrÃ´leur pour rÃ©cupÃ©rer la liste de tous les utilisateurs
 * 
 * @param {Request} req - Objet de requÃªte Express (non utilisÃ© ici)
 * @param {Response} res - Objet de rÃ©ponse Express
 * @returns {Response} RÃ©ponse JSON contenant la liste des utilisateurs
 * 
 * @example
 * // RequÃªte:
 * // GET http://localhost:4000/users
 * // RÃ©ponse:
 * // { "users": [{ "name": "Alice", "email": "alice@example.com" }] }
 */
export const getUsers = (req: Request, res: Response): Response => {
  // Retourne la liste complÃ¨te des utilisateurs au format JSON
  return res.json({ users });
};

/**
 * ContrÃ´leur pour ajouter un nouvel utilisateur
 * 
 * @param {Request} req - Objet de requÃªte Express contenant les donnÃ©es (name, email) dans req.body
 * @param {Response} res - Objet de rÃ©ponse Express
 * @returns {Response} RÃ©ponse JSON confirmant l'ajout ou indiquant une erreur
 * 
 * @example
 * // RequÃªte:
 * // POST http://localhost:4000/users
 * // Body: { "name": "Alice", "email": "alice@example.com" }
 * // RÃ©ponse (succÃ¨s):
 * // { "message": "Utilisateur Alice ajoutÃ© avec succÃ¨s !", "email": "alice@example.com" }
 * // RÃ©ponse (erreur):
 * // { "message": "Nom et email requis" }
 */
export const addUser = (req: Request, res: Response): Response => {
  // Extraction des donnÃ©es du corps de la requÃªte
  const { name, email } = req.body;

  // Validation : vÃ©rifier que les champs obligatoires sont prÃ©sents
  if (!name || !email) {
    // Retourne une erreur 400 (Bad Request) si les donnÃ©es sont incomplÃ¨tes
    return res.status(400).json({ message: "Nom et email requis" });
  }

  // CrÃ©ation d'un nouvel utilisateur avec un typage explicite
  const newUser: User = { name, email };

  // Ajout de l'utilisateur dans le tableau en mÃ©moire
  users.push(newUser);

  // Log dans la console pour le suivi (utile en dÃ©veloppement)
  console.log("ğŸ›  Utilisateur ajoutÃ© :", { name, email });

  // Retourne une rÃ©ponse de succÃ¨s avec les dÃ©tails de l'utilisateur ajoutÃ©
  return res.json({ 
    message: `Utilisateur ${name} ajoutÃ© avec succÃ¨s !`, 
    email 
  });
};